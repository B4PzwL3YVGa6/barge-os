#!/bin/sh
export PATH=/opt/bin:$PATH

if [ "$(id -u)" != "0" ]; then
  echo "$(basename $0): Operation not permitted, must be root." >&2
  exit 1
fi

if [ -f /var/lib/docker-root/profile ]; then
  logger -s -p user.info -t "docker[$$]" "Loading /var/lib/docker-root/profile"
  source /var/lib/docker-root/profile
fi

: ${DOCKER_STORAGE:="overlay"}
: ${DOCKER_DIR:="/var/lib/docker"}
: ${DOCKER_HOST:="-H unix://"}
: ${DOCKER_EXTRA_ARGS="--userland-proxy=false"}
: ${DOCKER_ULIMITS:=1048576}
: ${DOCKER_LOGFILE:="/var/lib/docker-root/docker.log"}
: ${DOCKER_TIMEOUT:=5}

ROOT_SWITCHED=false
if grep -qw "tmpfs / tmpfs" /proc/mounts; then
  ROOT_SWITCHED=true
fi

start() {
  if check; then
    echo "$(${DOCKER} -v) is running." >&2
    exit 1
  fi

  logger -s -p user.info -t "docker[$$]" "Setting ulimit ${DOCKER_ULIMITS}"
  ulimit -n ${DOCKER_ULIMITS}
  ulimit -u ${DOCKER_ULIMITS}

  # Top secret option...
  if ! ${ROOT_SWITCHED} ; then
    export DOCKER_RAMDISK=true
  fi
  logger -s -p user.info -t "docker[$$]" "DOCKER_RAMDISK=${DOCKER_RAMDISK}"

  echo -n 1 > /sys/fs/cgroup/memory/memory.use_hierarchy

  local params="-D -s ${DOCKER_STORAGE} -g \"${DOCKER_DIR}\" ${DOCKER_HOST} ${DOCKER_EXTRA_ARGS}"

  if ${DOCKER_SWITCHING} ; then
    for i in docker docker-containerd docker-containerd-ctr docker-containerd-shim docker-runc; do
      rm -f "/opt/bin/$i"
      if [ -f "${DOCKER_BIN_DIR}/$i" ]; then
        ln -s "${DOCKER_BIN_DIR}/$i" "/opt/bin/$i"
      fi
    done
    sed -i "s/Docker version.*/$(${DOCKER} -v)/" /etc/motd
  fi
  logger -s -p user.info -t "docker[$$]" "$(${DOCKER} -v)"
  echo "----- $(${DOCKER} -v) -----" >> "${DOCKER_LOGFILE}"

  logger -s -p user.info -t "docker[$$]" "Starting Docker daemon ${params}"
  echo "Starting Docker daemon ${params}" >> "${DOCKER_LOGFILE}"
  if [ "$$" == "1" ]; then
    eval "exec ${DOCKER} ${DOCKER_DAEMON_COMMAND} ${params} >> \"${DOCKER_LOGFILE}\" 2>&1"
  else
    eval "${DOCKER} ${DOCKER_DAEMON_COMMAND} ${params} >> \"${DOCKER_LOGFILE}\" 2>&1 &"
  fi
}

stop() {
  if check; then
    if [ "$(cat /var/run/docker.pid)" == "1" ]; then
      echo "$(basename $0): Operation not permitted, can't kill PID 1." >&2
      exit 1
    else
      local containers="$(${DOCKER} ps -q)"
      containers=$(echo ${containers})
      if [ -n "${containers}" ]; then
        logger -s -p user.info -t "docker[$$]" "Stopping containers"
        if [ -n "${DOCKER_TIMEOUT}" ]; then
          DOCKER_TIMEOUT="-t ${DOCKER_TIMEOUT}"
        fi
        ${DOCKER} stop ${DOCKER_TIMEOUT} ${containers}
      fi
      logger -s -p user.info -t "docker[$$]" "Stopping Docker daemon"
      kill $(cat /var/run/docker.pid)
    fi
  fi
}

restart() {
  if check; then
    stop
    local timeout=11
    while [ $(( timeout-- )) -gt 0 ] && check; do
      sleep 1
    done
    start
  else
    start
  fi
}

check() {
  [ -f /var/run/docker.pid ] && ps -A -o pid | grep -q "^\s*$(cat /var/run/docker.pid 2>/dev/null)$"
}

status() {
  if check; then
    echo "$(${DOCKER} -v) is running."
    exit 0
  else
    echo "$(${DOCKER} -v) is not running."
    exit 1
  fi
}

download() {
  local version="${1/#v/}"

  DOCKER_BIN_DIR="/opt/docker/v${version}"

  local versions=($(echo ${version} | tr -s '.' ' '))
  if [[ ${versions[0]} -lt 1 ]]; then
    echo "Docker v${version} is too old." >&2 && exit 1
  elif [[ (${versions[0]} -eq 1) && (${versions[1]} -lt 8) ]]; then
    echo "Docker v${version} is too old." >&2 && exit 1
  fi

  local base_url="https://get.docker.io/builds/Linux/x86_64"
  if [[ "${version}" == *"-rc"* ]]; then
    base_url="https://test.docker.com/builds/Linux/x86_64"
  fi

  if [ ! -f "${DOCKER_BIN_DIR}/${DOCKER_DAEMON}" ]; then
    echo -n "Downloading v${version} ..."
    trap "rm -rf \"${DOCKER_BIN_DIR}\"" ERR
    mkdir -p "${DOCKER_BIN_DIR}"
    wget -qO- "${base_url}/docker-${version}.tgz" | tar zxf - -C "${DOCKER_BIN_DIR}" 2>/dev/null
    if [ -d "${DOCKER_BIN_DIR}/usr/local/bin" ]; then
      mv -f "${DOCKER_BIN_DIR}/usr/local/bin"/* "${DOCKER_BIN_DIR}"
      rm -rf "${DOCKER_BIN_DIR}/usr"
    fi
    [ -f "${DOCKER_BIN_DIR}/${DOCKER_DAEMON}" ] || echo -n " not found."
    echo
  fi
}

DOCKER_DAEMON="docker"
DOCKER_DAEMON_COMMAND="daemon"
DOCKER="/opt/bin/${DOCKER_DAEMON}"
DOCKER_BIN_DIR="/usr/bin"
if [ ! -f "${DOCKER}" ]; then
  mkdir -p /opt/bin
  ln -s "${DOCKER_BIN_DIR}/${DOCKER_DAEMON}" "${DOCKER}"
fi
DOCKER_SWITCHING=false
if [ -n "$2" ]; then
  if [ "$2" = "default" ]; then
    DOCKER_BIN_DIR="/usr/bin"
  else
    version=$2
    if [ "${version}" = "latest" ]; then
      version=$(wget -qO- https://api.github.com/repos/docker/docker/releases/latest \
        | awk -F'"' '/tag_name/ { print $4 }')
    fi
    download ${version}
    [ ! -f "${DOCKER_BIN_DIR}/${DOCKER_DAEMON}" ] && exit 1
  fi
  DOCKER_SWITCHING=true
fi

case $1 in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  status)
    status
    ;;
  *)
    echo "Usage $0 {start|stop|restart|status} [<version>|latest|default]"
    exit 1
    ;;
esac
